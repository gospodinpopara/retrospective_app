Mutation:
  type: object
  config:
    fields:
      emailVerification:
        type: "SiteMessage"
        description: "Handles email verification using a verification token"
        args:
          verificationToken: "String!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\AuthMutation::emailVerificationTokenMutation", args)'
      emailVerificationTokenResend:
        type: "SiteMessage"
        description: "Resends the email verification token to the user."
        args:
          email: "String!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\AuthMutation::emailVerificationTokenResendMutation", args)'
      userRegistration:
        type: "UserRegistrationResponse"
        description: "Register user"
        args:
          userRegistrationInput: "UserRegistrationInput!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\AuthMutation::userRegistrationMutation", args)'
      createRetrospective:
        type: "RetrospectiveCreateResponse"
        description: "Create retrospective"
        args:
          retrospectiveCreateInput: "RetrospectiveCreateInput"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RetrospectiveMutation::createRetrospectiveMutation", args)'
      updateRetrospective:
        type: "RetrospectiveUpdateResponse"
        description: "Update retrospective"
        args:
          id: "Int!"
          retrospectiveUpdateInput: "RetrospectiveUpdateInput!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RetrospectiveMutation::updateRetrospectiveMutation", args)'
      deleteRetrospective:
        type: "Boolean"
        description: "Delete retrospective"
        args:
          id: "Int!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RetrospectiveMutation::deleteRetrospectiveMutation", args)'
      createRetrospectiveParticipant:
        type: "CreateRetrospectiveParticipantResponse"
        description: ""
        args:
          retrospectiveId: "Int!"
          participantId: "Int!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RetrospectiveParticipantMutation::createRetrospectiveParticipantMutation", args)'
      deleteRetrospectiveParticipant:
        type: "Boolean"
        description: "remove user from retrospective"
        args:
          retrospectiveId: "Int!"
          participantId: "Int!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RetrospectiveParticipantMutation::deleteRetrospectiveParticipantMutation", args)'
      updateRetrospectiveParticipant:
        type: "UpdateRetrospectiveParticipantResponse"
        description: "Update retrospective participant status"
        args:
          retrospectiveId: "Int!"
          participantId: "Int!"
          status: "RetrospectiveParticipantStatus!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RetrospectiveParticipantMutation::updateRetrospectiveParticipantMutation", args)'
      createRetrospectiveCard:
        type: "RetrospectiveCardCreateResponse"
        description: "Create card"
        args:
          cardCreateInput: "CardCreateInput!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RetrospectiveCardMutation::createRetrospectiveCardMutation", args)'
      updateRetrospectiveCard:
        type: "RetrospectiveCardUpdateResponse"
        description: "Update retrospective card"
        args:
          cardUpdateInput: "CardUpdateInput!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RetrospectiveCardMutation::updateRetrospectiveCardMutation", args)'
      deleteRetrospectiveCard:
        type: "Boolean"
        description: "Delete retrospective card"
        args:
          id: "Int!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RetrospectiveCardMutation::deleteRetrospectiveCardMutation", args)'
      retrospectiveCardUpvoteToggle:
        type: "Boolean"
        description: "Toggle upvote for a retrospective card"
        args:
          cardId: "Int!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\RetrospectiveCardMutation::toggleRetrospectiveCardUpvoteMutation", args)'
      userNotificationSetAllAsAck:
        type: "Boolean"
        description: "Set all user notifications as acknowledged"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\NotificationMutation::setAllAsAckMutation", args)'
      userNotificationSetVisited:
        type: "Boolean"
        description: "Set user notification as visited"
        args:
          id: "Int!"
        resolve: '@=mutation("App\\GraphQL\\Mutation\\NotificationMutation::setVisitedUserNotificationMutation", args)'